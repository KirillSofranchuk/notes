// Code generated by MockGen. DO NOT EDIT.
// Source: hashService.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Notes/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAbstractHashService is a mock of AbstractHashService interface.
type MockAbstractHashService struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractHashServiceMockRecorder
}

// MockAbstractHashServiceMockRecorder is the mock recorder for MockAbstractHashService.
type MockAbstractHashServiceMockRecorder struct {
	mock *MockAbstractHashService
}

// NewMockAbstractHashService creates a new mock instance.
func NewMockAbstractHashService(ctrl *gomock.Controller) *MockAbstractHashService {
	mock := &MockAbstractHashService{ctrl: ctrl}
	mock.recorder = &MockAbstractHashServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractHashService) EXPECT() *MockAbstractHashServiceMockRecorder {
	return m.recorder
}

// GetHash mocks base method.
func (m *MockAbstractHashService) GetHash(stringToHash string) (string, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetHash", stringToHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetHash indicates an expected call of GetHash.
func (mr *MockAbstractHashServiceMockRecorder) GetHash(stringToHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetHash", reflect.TypeOf((*MockAbstractHashService)(nil).GetHash), stringToHash)
}
