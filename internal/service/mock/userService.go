// Code generated by MockGen. DO NOT EDIT.
// Source: userService.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Notes/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAbstractUserService is a mock of AbstractUserService interface.
type MockAbstractUserService struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractUserServiceMockRecorder
}

// MockAbstractUserServiceMockRecorder is the mock recorder for MockAbstractUserService.
type MockAbstractUserServiceMockRecorder struct {
	mock *MockAbstractUserService
}

// NewMockAbstractUserService creates a new mock instance.
func NewMockAbstractUserService(ctrl *gomock.Controller) *MockAbstractUserService {
	mock := &MockAbstractUserService{ctrl: ctrl}
	mock.recorder = &MockAbstractUserServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractUserService) EXPECT() *MockAbstractUserServiceMockRecorder {
	return m.recorder
}

// CreateUser mocks base method.
func (m *MockAbstractUserService) CreateUser(login, password, name, surname string) (int, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", login, password, name, surname)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// CreateUser indicates an expected call of CreateUser.
func (mr *MockAbstractUserServiceMockRecorder) CreateUser(login, password, name, surname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockAbstractUserService)(nil).CreateUser), login, password, name, surname)
}

// DeleteUser mocks base method.
func (m *MockAbstractUserService) DeleteUser(id int) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser", id)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockAbstractUserServiceMockRecorder) DeleteUser(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockAbstractUserService)(nil).DeleteUser), id)
}

// GetUser mocks base method.
func (m *MockAbstractUserService) GetUser(userId int) (*model.User, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", userId)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAbstractUserServiceMockRecorder) GetUser(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAbstractUserService)(nil).GetUser), userId)
}

// UpdateUser mocks base method.
func (m *MockAbstractUserService) UpdateUser(id int, login, password, name, surname string) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", id, login, password, name, surname)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockAbstractUserServiceMockRecorder) UpdateUser(id, login, password, name, surname interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockAbstractUserService)(nil).UpdateUser), id, login, password, name, surname)
}
