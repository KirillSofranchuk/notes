// Code generated by MockGen. DO NOT EDIT.
// Source: abstractRepository.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Notes/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAbstractRepository is a mock of AbstractRepository interface.
type MockAbstractRepository struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractRepositoryMockRecorder
}

// MockAbstractRepositoryMockRecorder is the mock recorder for MockAbstractRepository.
type MockAbstractRepositoryMockRecorder struct {
	mock *MockAbstractRepository
}

// NewMockAbstractRepository creates a new mock instance.
func NewMockAbstractRepository(ctrl *gomock.Controller) *MockAbstractRepository {
	mock := &MockAbstractRepository{ctrl: ctrl}
	mock.recorder = &MockAbstractRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractRepository) EXPECT() *MockAbstractRepositoryMockRecorder {
	return m.recorder
}

// DeleteEntity mocks base method.
func (m *MockAbstractRepository) DeleteEntity(entity model.BusinessEntity) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteEntity", entity)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// DeleteEntity indicates an expected call of DeleteEntity.
func (mr *MockAbstractRepositoryMockRecorder) DeleteEntity(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteEntity", reflect.TypeOf((*MockAbstractRepository)(nil).DeleteEntity), entity)
}

// GetFolderById mocks base method.
func (m *MockAbstractRepository) GetFolderById(id, userId int) (*model.Folder, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolderById", id, userId)
	ret0, _ := ret[0].(*model.Folder)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetFolderById indicates an expected call of GetFolderById.
func (mr *MockAbstractRepositoryMockRecorder) GetFolderById(id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolderById", reflect.TypeOf((*MockAbstractRepository)(nil).GetFolderById), id, userId)
}

// GetFolders mocks base method.
func (m *MockAbstractRepository) GetFolders() []*model.Folder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFolders")
	ret0, _ := ret[0].([]*model.Folder)
	return ret0
}

// GetFolders indicates an expected call of GetFolders.
func (mr *MockAbstractRepositoryMockRecorder) GetFolders() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFolders", reflect.TypeOf((*MockAbstractRepository)(nil).GetFolders))
}

// GetFoldersByUserId mocks base method.
func (m *MockAbstractRepository) GetFoldersByUserId(userId int) []*model.Folder {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersByUserId", userId)
	ret0, _ := ret[0].([]*model.Folder)
	return ret0
}

// GetFoldersByUserId indicates an expected call of GetFoldersByUserId.
func (mr *MockAbstractRepositoryMockRecorder) GetFoldersByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersByUserId", reflect.TypeOf((*MockAbstractRepository)(nil).GetFoldersByUserId), userId)
}

// GetFoldersCount mocks base method.
func (m *MockAbstractRepository) GetFoldersCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFoldersCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetFoldersCount indicates an expected call of GetFoldersCount.
func (mr *MockAbstractRepositoryMockRecorder) GetFoldersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFoldersCount", reflect.TypeOf((*MockAbstractRepository)(nil).GetFoldersCount))
}

// GetNoteById mocks base method.
func (m *MockAbstractRepository) GetNoteById(id, userId int) (*model.Note, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNoteById", id, userId)
	ret0, _ := ret[0].(*model.Note)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetNoteById indicates an expected call of GetNoteById.
func (mr *MockAbstractRepositoryMockRecorder) GetNoteById(id, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNoteById", reflect.TypeOf((*MockAbstractRepository)(nil).GetNoteById), id, userId)
}

// GetNotes mocks base method.
func (m *MockAbstractRepository) GetNotes() []*model.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotes")
	ret0, _ := ret[0].([]*model.Note)
	return ret0
}

// GetNotes indicates an expected call of GetNotes.
func (mr *MockAbstractRepositoryMockRecorder) GetNotes() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotes", reflect.TypeOf((*MockAbstractRepository)(nil).GetNotes))
}

// GetNotesByUserId mocks base method.
func (m *MockAbstractRepository) GetNotesByUserId(userId int) []*model.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesByUserId", userId)
	ret0, _ := ret[0].([]*model.Note)
	return ret0
}

// GetNotesByUserId indicates an expected call of GetNotesByUserId.
func (mr *MockAbstractRepositoryMockRecorder) GetNotesByUserId(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesByUserId", reflect.TypeOf((*MockAbstractRepository)(nil).GetNotesByUserId), userId)
}

// GetNotesCount mocks base method.
func (m *MockAbstractRepository) GetNotesCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetNotesCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetNotesCount indicates an expected call of GetNotesCount.
func (mr *MockAbstractRepositoryMockRecorder) GetNotesCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetNotesCount", reflect.TypeOf((*MockAbstractRepository)(nil).GetNotesCount))
}

// GetUser mocks base method.
func (m *MockAbstractRepository) GetUser(login, password string) (*model.User, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", login, password)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockAbstractRepositoryMockRecorder) GetUser(login, password interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockAbstractRepository)(nil).GetUser), login, password)
}

// GetUserById mocks base method.
func (m *MockAbstractRepository) GetUserById(id int) (*model.User, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserById", id)
	ret0, _ := ret[0].(*model.User)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// GetUserById indicates an expected call of GetUserById.
func (mr *MockAbstractRepositoryMockRecorder) GetUserById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserById", reflect.TypeOf((*MockAbstractRepository)(nil).GetUserById), id)
}

// GetUsers mocks base method.
func (m *MockAbstractRepository) GetUsers() []*model.User {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsers")
	ret0, _ := ret[0].([]*model.User)
	return ret0
}

// GetUsers indicates an expected call of GetUsers.
func (mr *MockAbstractRepositoryMockRecorder) GetUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsers", reflect.TypeOf((*MockAbstractRepository)(nil).GetUsers))
}

// GetUsersCount mocks base method.
func (m *MockAbstractRepository) GetUsersCount() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUsersCount")
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUsersCount indicates an expected call of GetUsersCount.
func (mr *MockAbstractRepositoryMockRecorder) GetUsersCount() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUsersCount", reflect.TypeOf((*MockAbstractRepository)(nil).GetUsersCount))
}

// SaveEntity mocks base method.
func (m *MockAbstractRepository) SaveEntity(entity model.BusinessEntity) (int, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveEntity", entity)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// SaveEntity indicates an expected call of SaveEntity.
func (mr *MockAbstractRepositoryMockRecorder) SaveEntity(entity interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveEntity", reflect.TypeOf((*MockAbstractRepository)(nil).SaveEntity), entity)
}
