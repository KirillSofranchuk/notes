// Code generated by MockGen. DO NOT EDIT.
// Source: noteService.go

// Package mock is a generated GoMock package.
package mock

import (
	model "Notes/internal/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAbstractNoteService is a mock of AbstractNoteService interface.
type MockAbstractNoteService struct {
	ctrl     *gomock.Controller
	recorder *MockAbstractNoteServiceMockRecorder
}

// MockAbstractNoteServiceMockRecorder is the mock recorder for MockAbstractNoteService.
type MockAbstractNoteServiceMockRecorder struct {
	mock *MockAbstractNoteService
}

// NewMockAbstractNoteService creates a new mock instance.
func NewMockAbstractNoteService(ctrl *gomock.Controller) *MockAbstractNoteService {
	mock := &MockAbstractNoteService{ctrl: ctrl}
	mock.recorder = &MockAbstractNoteServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAbstractNoteService) EXPECT() *MockAbstractNoteServiceMockRecorder {
	return m.recorder
}

// AddToFavorites mocks base method.
func (m *MockAbstractNoteService) AddToFavorites(userId, id int) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddToFavorites", userId, id)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// AddToFavorites indicates an expected call of AddToFavorites.
func (mr *MockAbstractNoteServiceMockRecorder) AddToFavorites(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToFavorites", reflect.TypeOf((*MockAbstractNoteService)(nil).AddToFavorites), userId, id)
}

// CreateNote mocks base method.
func (m *MockAbstractNoteService) CreateNote(userId int, title, content string, tags *[]string) (int, *model.ApplicationError) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateNote", userId, title, content, tags)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(*model.ApplicationError)
	return ret0, ret1
}

// CreateNote indicates an expected call of CreateNote.
func (mr *MockAbstractNoteServiceMockRecorder) CreateNote(userId, title, content, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateNote", reflect.TypeOf((*MockAbstractNoteService)(nil).CreateNote), userId, title, content, tags)
}

// DeleteFromFavorites mocks base method.
func (m *MockAbstractNoteService) DeleteFromFavorites(userId, id int) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteFromFavorites", userId, id)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// DeleteFromFavorites indicates an expected call of DeleteFromFavorites.
func (mr *MockAbstractNoteServiceMockRecorder) DeleteFromFavorites(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteFromFavorites", reflect.TypeOf((*MockAbstractNoteService)(nil).DeleteFromFavorites), userId, id)
}

// DeleteNote mocks base method.
func (m *MockAbstractNoteService) DeleteNote(userId, id int) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteNote", userId, id)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// DeleteNote indicates an expected call of DeleteNote.
func (mr *MockAbstractNoteServiceMockRecorder) DeleteNote(userId, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteNote", reflect.TypeOf((*MockAbstractNoteService)(nil).DeleteNote), userId, id)
}

// FindNotesByQueryPhrase mocks base method.
func (m *MockAbstractNoteService) FindNotesByQueryPhrase(userId int, query string) []*model.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindNotesByQueryPhrase", userId, query)
	ret0, _ := ret[0].([]*model.Note)
	return ret0
}

// FindNotesByQueryPhrase indicates an expected call of FindNotesByQueryPhrase.
func (mr *MockAbstractNoteServiceMockRecorder) FindNotesByQueryPhrase(userId, query interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindNotesByQueryPhrase", reflect.TypeOf((*MockAbstractNoteService)(nil).FindNotesByQueryPhrase), userId, query)
}

// GetFavoriteNotes mocks base method.
func (m *MockAbstractNoteService) GetFavoriteNotes(userId int) []*model.Note {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFavoriteNotes", userId)
	ret0, _ := ret[0].([]*model.Note)
	return ret0
}

// GetFavoriteNotes indicates an expected call of GetFavoriteNotes.
func (mr *MockAbstractNoteServiceMockRecorder) GetFavoriteNotes(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFavoriteNotes", reflect.TypeOf((*MockAbstractNoteService)(nil).GetFavoriteNotes), userId)
}

// MoveToFolder mocks base method.
func (m *MockAbstractNoteService) MoveToFolder(userId, id int, folderId *int) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MoveToFolder", userId, id, folderId)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// MoveToFolder indicates an expected call of MoveToFolder.
func (mr *MockAbstractNoteServiceMockRecorder) MoveToFolder(userId, id, folderId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MoveToFolder", reflect.TypeOf((*MockAbstractNoteService)(nil).MoveToFolder), userId, id, folderId)
}

// UpdateNote mocks base method.
func (m *MockAbstractNoteService) UpdateNote(userId, id int, title, content string, tags *[]string) *model.ApplicationError {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateNote", userId, id, title, content, tags)
	ret0, _ := ret[0].(*model.ApplicationError)
	return ret0
}

// UpdateNote indicates an expected call of UpdateNote.
func (mr *MockAbstractNoteServiceMockRecorder) UpdateNote(userId, id, title, content, tags interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateNote", reflect.TypeOf((*MockAbstractNoteService)(nil).UpdateNote), userId, id, title, content, tags)
}
